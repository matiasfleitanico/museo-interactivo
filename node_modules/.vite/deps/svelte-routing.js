import "./chunk-RSJERJUL.js";

// node_modules/svelte-routing/src/index.js
import { default as default2 } from "C:/Programacion/museo/NEW/museo-interactivo/node_modules/svelte-routing/src/Router.svelte";
import { default as default3 } from "C:/Programacion/museo/NEW/museo-interactivo/node_modules/svelte-routing/src/Route.svelte";
import { default as default4 } from "C:/Programacion/museo/NEW/museo-interactivo/node_modules/svelte-routing/src/Link.svelte";

// node_modules/svelte-routing/src/history.js
function getLocation(source) {
  return {
    ...source.location,
    state: source.history.state,
    key: source.history.state && source.history.state.key || "initial"
  };
}
function createHistory(source, options) {
  const listeners = [];
  let location2 = getLocation(source);
  return {
    get location() {
      return location2;
    },
    listen(listener) {
      listeners.push(listener);
      const popstateListener = () => {
        location2 = getLocation(source);
        listener({ location: location2, action: "POP" });
      };
      source.addEventListener("popstate", popstateListener);
      return () => {
        source.removeEventListener("popstate", popstateListener);
        const index = listeners.indexOf(listener);
        listeners.splice(index, 1);
      };
    },
    navigate(to, { state, replace = false } = {}) {
      state = { ...state, key: Date.now() + "" };
      try {
        if (replace) {
          source.history.replaceState(state, null, to);
        } else {
          source.history.pushState(state, null, to);
        }
      } catch (e) {
        source.location[replace ? "replace" : "assign"](to);
      }
      location2 = getLocation(source);
      listeners.forEach((listener) => listener({ location: location2, action: "PUSH" }));
    }
  };
}
function createMemorySource(initialPathname = "/") {
  let index = 0;
  const stack = [{ pathname: initialPathname, search: "" }];
  const states = [];
  return {
    get location() {
      return stack[index];
    },
    addEventListener(name, fn) {
    },
    removeEventListener(name, fn) {
    },
    history: {
      get entries() {
        return stack;
      },
      get index() {
        return index;
      },
      get state() {
        return states[index];
      },
      pushState(state, _, uri) {
        const [pathname, search = ""] = uri.split("?");
        index++;
        stack.push({ pathname, search });
        states.push(state);
      },
      replaceState(state, _, uri) {
        const [pathname, search = ""] = uri.split("?");
        stack[index] = { pathname, search };
        states[index] = state;
      }
    }
  };
}
var canUseDOM = Boolean(
  typeof window !== "undefined" && window.document && window.document.createElement
);
var globalHistory = createHistory(canUseDOM ? window : createMemorySource());
var { navigate } = globalHistory;

// node_modules/svelte-routing/src/utils.js
function shouldNavigate(event) {
  return !event.defaultPrevented && event.button === 0 && !(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function hostMatches(anchor) {
  const host = location.host;
  return anchor.host == host || anchor.href.indexOf(`https://${host}`) === 0 || anchor.href.indexOf(`http://${host}`) === 0;
}

// node_modules/svelte-routing/src/actions.js
function link(node) {
  function onClick(event) {
    const anchor = event.currentTarget;
    if (anchor.target === "" && hostMatches(anchor) && shouldNavigate(event)) {
      event.preventDefault();
      navigate(anchor.pathname + anchor.search, { replace: anchor.hasAttribute("replace") });
    }
  }
  node.addEventListener("click", onClick);
  return {
    destroy() {
      node.removeEventListener("click", onClick);
    }
  };
}
function links(node) {
  function findClosest(tagName, el) {
    while (el && el.tagName !== tagName) {
      el = el.parentNode;
    }
    return el;
  }
  function onClick(event) {
    const anchor = findClosest("A", event.target);
    if (anchor && anchor.target === "" && hostMatches(anchor) && shouldNavigate(event) && !anchor.hasAttribute("noroute")) {
      event.preventDefault();
      navigate(anchor.pathname + anchor.search, { replace: anchor.hasAttribute("replace") });
    }
  }
  node.addEventListener("click", onClick);
  return {
    destroy() {
      node.removeEventListener("click", onClick);
    }
  };
}
export {
  default4 as Link,
  default3 as Route,
  default2 as Router,
  link,
  links,
  navigate
};
//# sourceMappingURL=svelte-routing.js.map
